'use client';
import { useRef, useState, useEffect } from "react";
import { Play, Pause, SkipBack, SkipForward, Shuffle, Repeat, Repeat1,  Volume2 } from "lucide-react";


//import ki·ªÉu d·ªØ li·ªáu b√†i h√°t SongProps t·ª´ Playlist.tsx ƒë·ªÉ truy·ªÅn v√¥ MusicPlayer
export type SongProps = {
    title: string;
    artist: string;
    albumArt: string;
    audioSrc: string;
};
type Props = {
    song: SongProps;
}

export default function MusicPlayer({ song }: Props) {
    // üîß Khai b√°o ki·ªÉu r√µ r√†ng cho ref
    const audioRef = useRef<HTMLAudioElement | null>(null); //tr·ªè t·ªõi th·∫ª <audio>, d√πng ƒë·ªÉ play/pause, l·∫•y duration, currentTime, volume
    const [isPlaying, setIsPlaying] = useState(false);      //tr·∫°ng th√°i nh·∫°c ƒëang ch·∫°y hay t·∫°m d·ª´ng.
    const [progress, setProgress] = useState(0);            //tr·∫°ng th√°i ti·∫øn tr√¨nh b√†i h√°t (0=>100%)
    const [volume, setVolume] = useState(100);              //tr·∫°ng th√°i √¢m l∆∞·ª£ng (0=>100%)
    const [isShuffle, setIsShuffle] = useState(false);      // tr·∫°ng th√°i Shuffle, khi true th√¨ s·∫Ω tr·ªôn b√†i ng·∫´u nhi√™n 
    const [repeatMode, setRepeatMode] = useState<0 | 1 | 2>(0);     // ch·∫ø ƒë·ªô l·∫∑p l·∫°i. 0: none, 1: all, 2: one

    // h√†m togglePlay ƒë·ªÉ nh·∫•n n√∫t play/pause
    const togglePlay = () => {
        const audio = audioRef.current;
        if (!audio) return; //n·∫øu ko c√≥ audio th√¨ tho√°t h√†m
        if (isPlaying) {
            audio.pause(); //n·∫øu ƒëang ph√°t th√¨ d·ª´ng
        } else {
            audio.play(); //n·∫øu ƒëang d·ª´ng th√¨ ph√°t
        }
        setIsPlaying(!isPlaying); //c·∫≠p nh·∫≠p l·∫°i tr·∫°ng th√°i isPlaying
    };

    // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh tr√™n th·ªùi gian th·ª±c
    const handleTimeUpdate = () => {
        const audio = audioRef.current;
        if (!audio || isNaN(audio.duration) || audio.duration === 0) return;//n·∫øu ko c√≥ audio th√¨ tho√°t
        setProgress((audio.currentTime / audio.duration) * 100);
    };

    // K√©o thanh ti·∫øn tr√¨nh th√¨ c·∫≠p nh·∫≠p l·∫°i ƒëang h√°t ·ªü ƒëo·∫°n n√†o
    const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
        const audio = audioRef.current;
        if (!audio) return;//n·∫øu ko c√≥ audio th√¨ tho√°t
        const newTime = (Number(e.target.value) / 100) * audio.duration;
        audio.currentTime = newTime;
        setProgress(Number(e.target.value));
    };

    // K√©o thanh √¢m l∆∞·ª£ng th√¨ c·∫≠p nh·∫≠p l·∫°i √¢m l∆∞·ª£ng
    const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newVolume = Number(e.target.value);
        setVolume(newVolume);
        const audio = audioRef.current;
        if (audio) {
            audio.volume = newVolume / 100;
        }
    };

    // d√πng cho n√∫t l·∫∑p l·∫°i b√†i h√°t, c√≥ 3 ch·∫ø ƒë·ªô l·∫∑p l·∫°i: 0: none, 1: all, 2: one
    const cycleRepeatMode = () => {
        setRepeatMode(prev => (prev + 1) % 3 as 0 | 1 | 2);
    };

    // handleEnded: x·ª≠ l√Ω khi k·∫øt th√∫c b√†i h√°t
    const handleEnded = () => {
        const audio = audioRef.current;
        if (!audio) return; //n·∫øu ko c√≥ audio th√¨ tho√°t
        //ki·ªÉm tra c√°c ch·∫ø ƒë·ªô l·∫∑p l·∫°i
        if (repeatMode === 2) {     // l·∫∑p l·∫°i 1 b√†i h√°t li√™n t·ª•c
            audio.currentTime = 0;  //ƒë·∫∑t l·∫°i th·ªùi gian b√†i h√°t v·ªÅ ƒë·∫ßu b√†i
            audio.play();           //r·ªìi ph√°t b√†i h√°t
        } 
        else if (repeatMode === 1) {  //l·∫∑p l·∫°i t·∫•t c·∫£ b√†i h√°t khi c√≥ ds b√†i h√°t
            audio.currentTime = 0;
            audio.play();
        } 
        else { // No Repeat
            setIsPlaying(false);
        }
    };
    //testings

    //khi nh·∫•n v√†o 1 b√†i h√°t kh√°c th√¨ g·ªçi audio.play ƒë·ªÉ ph√°t nh·∫°c ngay l·∫≠p t·ª©c
    useEffect(() => {
        const audio = audioRef.current;
        if (audio && song.audioSrc) {
            audio.load();
            audio.play().catch(err => console.warn("Autoplay blocked", err));
            setIsPlaying(true);
            setProgress(0); // reset thanh ti·∫øn tr√¨nh
        }
    }, [song.audioSrc]);
    
    return (
        <div className="fixed bottom-0 left-0 w-full h-[80px] bg-zinc-900 text-white flex items-center justify-between px-6 shadow-xl z-50">
            
            {/* Left: Song Info */}
            <div className="flex items-center gap-4 w-50">
                <img src={song.albumArt} alt="Album Art" className="w-12 h-12 rounded-md object-cover" />
                <div>
                    <h4 className="text-sm font-semibold">{song.title}</h4>
                    <p className="text-xs text-zinc-400">{song.artist}</p>
                </div>
            </div>

            {/* Center: Controls */}
            <div className="flex flex-col items-center w-1/2">
                <div className="flex items-center gap-6 mb-1">
                    <button onClick={() => setIsShuffle(!isShuffle)} className={isShuffle ? "text-green-500" : "hover:text-white text-gray-400"}>
                        <Shuffle size={20} />
                    </button>
                    <button className="hover:text-white text-gray-400 cursor-pointer">
                        <SkipBack size={20} />
                    </button>
                    <button onClick={togglePlay} className="bg-white text-black p-1 rounded-full cursor-pointer">
                        {isPlaying ? <Pause size={20} /> : <Play size={20} />}
                    </button>
                    <button className="hover:text-white text-gray-400 cursor-pointer">
                        <SkipForward size={20} />
                    </button>
                    <button onClick={cycleRepeatMode} className={repeatMode === 2 ? "text-green-500" : ""}>
                        {repeatMode === 2 ? <Repeat1 size={20} /> : <Repeat size={20} className={repeatMode === 1 ? "text-green-500" : "text-gray-400 hover:text-white"} />}
                    </button>
                </div>
                <input 
                    type="range" 
                    value={progress} 
                    onChange={handleSeek} 
                    className="w-full h-1 bg-zinc-700 rounded-lg cursor-pointer accent-green-500"/>
            </div>

            {/* Right: Volume */}
            <div className="flex items-center gap-2 w-[120px]">
                <Volume2 size={20} />
                {/* type="range" l√† m·ªôt thanh tr∆∞·ª£t */}
                <input 
                    type="range" 
                    min={0} 
                    max={100} 
                    value={volume} 
                    onChange={handleVolumeChange} 
                    className="w-full accent-green-500" />
            </div>

            <audio 
                ref={audioRef} 
                src={song.audioSrc} 
                onTimeUpdate={handleTimeUpdate} 
                onEnded={handleEnded}
                preload="auto" />
        </div>
    );
}
